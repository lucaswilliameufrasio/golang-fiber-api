// Code generated by MockGen. DO NOT EDIT.
// Source: src/data/protocols/load_user_by_email.go

// Package mock_protocols is a generated GoMock package.
package mock_protocols

import (
	protocols "lucaswilliameufrasio/golang-fiber-api/src/data/protocols"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLoadUserByEmailRepository is a mock of LoadUserByEmailRepository interface.
type MockLoadUserByEmailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoadUserByEmailRepositoryMockRecorder
}

// MockLoadUserByEmailRepositoryMockRecorder is the mock recorder for MockLoadUserByEmailRepository.
type MockLoadUserByEmailRepositoryMockRecorder struct {
	mock *MockLoadUserByEmailRepository
}

// NewMockLoadUserByEmailRepository creates a new mock instance.
func NewMockLoadUserByEmailRepository(ctrl *gomock.Controller) *MockLoadUserByEmailRepository {
	mock := &MockLoadUserByEmailRepository{ctrl: ctrl}
	mock.recorder = &MockLoadUserByEmailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadUserByEmailRepository) EXPECT() *MockLoadUserByEmailRepositoryMockRecorder {
	return m.recorder
}

// LoadByEmail mocks base method.
func (m *MockLoadUserByEmailRepository) LoadByEmail(email string) (*protocols.LoadUserByIDRepositoryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadByEmail", email)
	ret0, _ := ret[0].(*protocols.LoadUserByIDRepositoryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadByEmail indicates an expected call of LoadByEmail.
func (mr *MockLoadUserByEmailRepositoryMockRecorder) LoadByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadByEmail", reflect.TypeOf((*MockLoadUserByEmailRepository)(nil).LoadByEmail), email)
}
