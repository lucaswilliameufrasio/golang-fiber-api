// Code generated by MockGen. DO NOT EDIT.
// Source: src/data/protocols/hash_comparer.go

// Package mock_protocols is a generated GoMock package.
package mock_protocols

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHashComparer is a mock of HashComparer interface.
type MockHashComparer struct {
	ctrl     *gomock.Controller
	recorder *MockHashComparerMockRecorder
}

// MockHashComparerMockRecorder is the mock recorder for MockHashComparer.
type MockHashComparerMockRecorder struct {
	mock *MockHashComparer
}

// NewMockHashComparer creates a new mock instance.
func NewMockHashComparer(ctrl *gomock.Controller) *MockHashComparer {
	mock := &MockHashComparer{ctrl: ctrl}
	mock.recorder = &MockHashComparerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashComparer) EXPECT() *MockHashComparerMockRecorder {
	return m.recorder
}

// Compare mocks base method.
func (m *MockHashComparer) Compare(plaintext, digest string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", plaintext, digest)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compare indicates an expected call of Compare.
func (mr *MockHashComparerMockRecorder) Compare(plaintext, digest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockHashComparer)(nil).Compare), plaintext, digest)
}
