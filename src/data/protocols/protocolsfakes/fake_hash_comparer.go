// Code generated by counterfeiter. DO NOT EDIT.
package protocolsfakes

import (
	"lucaswilliameufrasio/golang-fiber-api/src/data/protocols"
	"sync"
)

type FakeHashComparer struct {
	CompareStub        func(string, string) (bool, error)
	compareMutex       sync.RWMutex
	compareArgsForCall []struct {
		arg1 string
		arg2 string
	}
	compareReturns struct {
		result1 bool
		result2 error
	}
	compareReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHashComparer) Compare(arg1 string, arg2 string) (bool, error) {
	fake.compareMutex.Lock()
	ret, specificReturn := fake.compareReturnsOnCall[len(fake.compareArgsForCall)]
	fake.compareArgsForCall = append(fake.compareArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.CompareStub
	fakeReturns := fake.compareReturns
	fake.recordInvocation("Compare", []interface{}{arg1, arg2})
	fake.compareMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHashComparer) CompareCallCount() int {
	fake.compareMutex.RLock()
	defer fake.compareMutex.RUnlock()
	return len(fake.compareArgsForCall)
}

func (fake *FakeHashComparer) CompareCalls(stub func(string, string) (bool, error)) {
	fake.compareMutex.Lock()
	defer fake.compareMutex.Unlock()
	fake.CompareStub = stub
}

func (fake *FakeHashComparer) CompareArgsForCall(i int) (string, string) {
	fake.compareMutex.RLock()
	defer fake.compareMutex.RUnlock()
	argsForCall := fake.compareArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHashComparer) CompareReturns(result1 bool, result2 error) {
	fake.compareMutex.Lock()
	defer fake.compareMutex.Unlock()
	fake.CompareStub = nil
	fake.compareReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeHashComparer) CompareReturnsOnCall(i int, result1 bool, result2 error) {
	fake.compareMutex.Lock()
	defer fake.compareMutex.Unlock()
	fake.CompareStub = nil
	if fake.compareReturnsOnCall == nil {
		fake.compareReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.compareReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeHashComparer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.compareMutex.RLock()
	defer fake.compareMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHashComparer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ protocols.HashComparer = new(FakeHashComparer)
